import {
  Finding,
  FindingType,
  FindingSeverity,
  TransactionEvent,
  HandleTransaction,
} from 'forta-agent';

import {
  createAddress,
  TestTransactionEvent,
} from 'forta-agent-tools';

import {
  provideHandleTransaction,
  getContractFactory,
  PAIR_SWAP_ABI,
  SWAP_FACTORY_ABI,
} from './agent';

import {
  ethers,
} from 'ethers';

const createFinding = (amount0Out: string, amount1Out: string, to: string, data: string) => Finding.fromObject({
  name: 'Flash Loan Detected',
  description: 'A flash loan has been executed on an Impossible Finance StableXSwap contract',
  alertId: 'IMPOSSIBLE-5',
  severity: FindingSeverity.Info,
  type: FindingType.Info,
  protocol: 'Impossible Finance',
  metadata: {
    amount0Out: amount0Out,
    amount1Out: amount1Out,
    to: to,
    data: data,
  },
});

describe('StableXSwap Flash Loan Agent test suite', () => {
  let handler: HandleTransaction;
  let mockGetContractFactory: any;
  let contract: ethers.utils.Interface;

  // Set the factory address
  const FACTORY_ADDR = createAddress('0xa1');
  // Set a pair address
  const PAIR_ADDR = createAddress('0xb1');
  // Set a user address
  const USER_ADDR = createAddress('0xc1');
  // Set the loan receiver address
  const RCVR_ADDR = createAddress('0xd1');

  beforeEach(() => {
    // Setup the mock getContractFactory function 
    mockGetContractFactory = jest.fn();
    // Setup the handler to user the mock getContract function
    handler = provideHandleTransaction(FACTORY_ADDR, mockGetContractFactory);
    contract = new ethers.utils.Interface(PAIR_SWAP_ABI);
  });

  it('should ignore empty transactions', async () => {
     const tx: TransactionEvent = new TestTransactionEvent();

    // Run the handler on the test transaction
     const findings: Finding[] = await handler(tx);
    // Check if findings contain expected results
     expect(findings).toStrictEqual([]);
  });

  it('should ignore calls to `swap` which are not a flashloan', async () => {
    const tx: TransactionEvent = new TestTransactionEvent()
      // Add a call to the function `swap`
      .addTraces({
        to: PAIR_ADDR,
        from: USER_ADDR,
        input: contract.encodeFunctionData(
          'swap',
          [
            ethers.BigNumber.from('0'),
            ethers.BigNumber.from('1000'),
            createAddress('0x0'),
            // The argument `data` is zero, so it is not a flashloan
            ethers.BigNumber.from('0'),
          ],
        ),
        output: '0x0',
      });

    // Run the handler on the test transaction
    const findings: Finding[] = await handler(tx);
    // Check if findings contain expected results
    expect(findings).toStrictEqual([]);
  });

  it('should ignore calls to `swap` which are a flashloan on a pair NOT generated by the Impossible Finance factory', async () => {
    // The mock getContractFactory function returns 0xf1 which is not the factory address (FACTORY_ADDR)
    mockGetContractFactory.mockResolvedValue(createAddress('0xf1'));

    // Create an interface to generate the log data to be attached to the test transaction
    const SWAP_FACTORY_IFACE: ethers.utils.Interface = new ethers.utils.Interface(PAIR_SWAP_ABI);
    const log = SWAP_FACTORY_IFACE.encodeEventLog(
      SWAP_FACTORY_IFACE.getEvent('Swap'),
      [
        USER_ADDR, ethers.BigNumber.from('0'),
        ethers.BigNumber.from('1010'),
        ethers.BigNumber.from('0'),
        ethers.BigNumber.from('1000'),
        RCVR_ADDR
      ],
    );

    const tx: TransactionEvent = new TestTransactionEvent()
      // Add the function call to `swap`
      .addTraces({
        to: PAIR_ADDR,
        from: USER_ADDR,
        input: contract.encodeFunctionData(
          'swap',
          [
            ethers.BigNumber.from('0'),
            ethers.BigNumber.from('1000'),
            RCVR_ADDR,
            ethers.BigNumber.from('100'),
          ],
        ),
        output: '0x0',
      })
      // Add the log indicating a successful call to `swap`
      .addAnonymousEventLog(
        PAIR_ADDR,
        log.data,
        ...log.topics,
      );

    // Run the handler on the test transaction
    const findings: Finding[] = await handler(tx);
    // Check if findings contain expected results
    expect(findings).toStrictEqual([]);
  });

  it('should detect calls to `swap` which are a flashloan on a pair generated by the Impossible Finance factory', async () => {
    // The mock getContractFactory function returns 0xa1 which is the factory address (FACTORY_ADDR)
    mockGetContractFactory.mockResolvedValue(createAddress('0xa1'));

    // Create an interface to generate the log data to be attached to the test transaction
    const SWAP_FACTORY_IFACE: ethers.utils.Interface = new ethers.utils.Interface(PAIR_SWAP_ABI);
    const log = SWAP_FACTORY_IFACE.encodeEventLog(
      SWAP_FACTORY_IFACE.getEvent('Swap'),
      [
        USER_ADDR, ethers.BigNumber.from('0'),
        ethers.BigNumber.from('1010'),
        ethers.BigNumber.from('0'),
        ethers.BigNumber.from('1000'),
        RCVR_ADDR
      ],
    );

    const tx: TransactionEvent = new TestTransactionEvent()
      // Add the function call to `swap`
      .addTraces({
        to: PAIR_ADDR,
        from: USER_ADDR,
        input: contract.encodeFunctionData(
          'swap',
          [
            ethers.BigNumber.from('0'),
            ethers.BigNumber.from('1000'),
            RCVR_ADDR,
            ethers.BigNumber.from('100'),
          ],
        ),
        output: '0x0',
      })
      // Add the log indicating a successful call to `swap`
      .addAnonymousEventLog(
        PAIR_ADDR,
        log.data,
        ...log.topics,
      );

    // Run the handler on the test transaction
    const findings: Finding[] = await handler(tx);

    // Check if findings contain expected results
    expect(findings).toStrictEqual([
      createFinding(
        '0',
        '1000',
        RCVR_ADDR,
        ethers.BigNumber.from('100').toHexString(),
      ),
    ]);
  });
});
