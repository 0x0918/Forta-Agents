import {
  Finding,
  HandleTransaction,
  TransactionEvent,
} from "forta-agent";
import { createFinding } from "./utils";

const TORNADO_ADDRESSES = ["0x910Cbd523D972eb0a6f4cAe4618aD62622b39DbF"];

const WITHDRAWAL_EVENT_ABI =
  "event Withdrawal(address to, bytes32 nullifierHash, address indexed relayer, uint256 fee)";

export const provideTransactionHandler = (
  tornadoAddresses: string[]
): HandleTransaction => {
  const tornadoFundedAddresses: { [key: string]: boolean } = {};

  return async (txEvent: TransactionEvent): Promise<Finding[]> => {
    const findings: Finding[] = [];

    const tornadoWithdrawalsEvents = tornadoAddresses
      .map((tornadoAddress: string) =>
        txEvent.filterLog(WITHDRAWAL_EVENT_ABI, tornadoAddress)
      )
      .flat();

    tornadoWithdrawalsEvents.forEach((tornadoWithdrawal) => {
      tornadoFundedAddresses[tornadoWithdrawal.args["to"].toLowerCase()] = true;
    });

    for (let trace of txEvent.traces) {
      if (trace.type === "create" && tornadoFundedAddresses[trace.action.from]) {
        findings.push(createFinding(trace.action.from)) 
      }
    }

    return findings;
  };
};

export default {
  handleTransaction: provideTransactionHandler(TORNADO_ADDRESSES),
};
